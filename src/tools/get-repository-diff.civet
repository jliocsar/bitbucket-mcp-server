{ z } from zod

{ BitbucketToolDeclaration } from ../bitbucket.civet

export getRepositoryDiffTool := new BitbucketToolDeclaration {
  name: "get-repository-diff",
  config: {
    title: "Get repository diff",
    description: "Get a repository diff",
    inputSchema: {
      workspace: z.string().describe("The Bitbucket workspace name or UUID where the repository is located"),
      repository: z.string().describe("The repository name or UUID to get the diff from"),
      spec: z.string().describe("The diff specification (e.g., \"commit1..commit2\", \"branch1..branch2\")"),
      pullRequestId: z.number().describe("The unique identifier of the pull request for the diff"),
      binary: z.boolean().optional().describe("Whether to include binary file changes"),
      context: z.number().optional().describe("Number of context lines around changes"),
      fields: z.string().optional().describe("Comma-separated list of fields to include in the response"),
      ignoreWhitespace: z.boolean().optional().describe("Whether to ignore whitespace changes"),
      merge: z.boolean().optional().describe("Whether to include merge commits"),
      path: z.string().optional().describe("Specific file path to get diff for"),
      renames: z.boolean().optional().describe("Whether to detect renames"),
      topic: z.boolean().optional().describe("Whether to include topic information"),
    },
  },
  run({ workspace, repository, spec, binary, context, fields, ignoreWhitespace, merge, path, renames, topic }) {
    // Get the repository diff
    repositoryDiff := @bitbucket.repositories
      |> .getDiff {
        workspace,
        repo_slug: repository,
        spec,
        binary,
        context,
        fields,
        ignore_whitespace: ignoreWhitespace,
        merge,
        path,
        renames,
        topic,
      }
      |> await
      |> .data

    // Return the repository diff
    repositoryDiff
  }
}
