{ z } from zod

{ BitbucketToolDeclaration } from ../bitbucket.civet

export listCommitsTool := new BitbucketToolDeclaration {
  name: "list-commits",
  config: {
    title: "List commits",
    description: "List commits",
    inputSchema: {
      workspace: z.string().describe("The Bitbucket workspace name or UUID where the repository is located"),
      repository: z.string().describe("The repository name or UUID to list commits from"),
      branch: z.string().optional().describe("Specific branch to list commits from"),
      page: z.string().optional().describe("Page token for pagination"),
      pagelen: z.number().optional().describe("Number of items to return per page (default: 30, max: 100)"),
      q: z.string().optional().describe("Query string to filter commits"),
      sort: z.string().optional().describe("Field to sort results by (e.g., \"date\", \"-date\")"),
      exclude: z.string().optional().describe("Branch, tag, or commit to exclude from the results"),
      fields: z.string().optional().describe("Comma-separated list of fields to include in the response"),
      include: z.string().optional().describe("Branch, tag, or commit to include in the results (defaults to default branch)"),
    },
  },
  run({ workspace, repository, page, pagelen, q, sort, exclude, fields, include }) {
    // Get the commits
    commits := @bitbucket.repositories
      |> .listCommits {
        workspace,
        repo_slug: repository,
        page,
        pagelen,
        q,
        sort,
        exclude,
        fields,
        include,
      }
      |> await
      |> .data

    // Return the commits
    commits
  }
}
