{ z } from zod

{ BitbucketToolDeclaration } from ../bitbucket.civet

export listIssuesTool := new BitbucketToolDeclaration {
  name: "list-issues",
  config: {
    title: "List issues",
    description: "List issues from a repository. Essential for project management and tracking bugs, features, and tasks.",
    inputSchema: {
      workspace: z.string().describe("The Bitbucket workspace name or UUID where the repository is located"),
      repository: z.string().describe("The repository name or UUID to list issues from"),
      fields: z.string().optional().describe("Comma-separated list of fields to include in the response"),
      page: z.string().optional().describe("Page token for pagination"),
      pagelen: z.number().optional().describe("Number of items to return per page (default: 10, max: 100)"),
      q: z.string().optional().describe("Query string to filter issues"),
      sort: z.string().optional().describe("Field to sort results by (e.g., \"created_on\", \"-created_on\", \"updated_on\")"),
    },
  },
  run({ workspace, repository, fields, page, pagelen, q, sort }) {
    // Get the issues
    issues := @bitbucket.repositories
      |> .listIssues {
        workspace,
        repo_slug: repository,
        fields,
        page,
        pagelen,
        q,
        sort
      }
      |> await
      |> .data

    // Return the issues
    issues
  }
} 