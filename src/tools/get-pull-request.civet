assert from node:assert

{ z } from zod
type { Params } from bitbucket/lib/bitbucket

{ BitbucketToolDeclaration } from ../bitbucket.civet

export getPullRequestTool := new BitbucketToolDeclaration {
  name: "get-pull-request",
  config: {
    title: "Get pull request",
    description: "Get a pull request",
    inputSchema: {
      pullRequestId: z.number(),
      repository: z.string(),
      workspace: z.string(),
      fields: z.string().optional(),
    },
  },
  run({ pullRequestId, repository, workspace, fields }) {
    // Define the output schema for the get pull request tool
    getPullRequestOutputSchema := z.object {
      title: z.string(),
      description: z.string(),
      diff: z.string(),
    }

    // Define the parameters for the get pull request and get pull request diff actions
    pullRequestParams := {
      pull_request_id: pullRequestId,
      repo_slug: repository,
      workspace,
      fields,
    } as const satisfies Params.RepositoriesGetPullRequest;

    // Get the pull request and pull request diff
    [pullRequest, pullRequestDiff] := Promise.all [
      @bitbucket.repositories.getPullRequest(pullRequestParams),
      @bitbucket.repositories.getPullRequestDiff(pullRequestParams),
    ]
      |> await
      |> .map .data

    // Assert the pull request output is valid
    outputResult := getPullRequestOutputSchema.safeParse {
      pullRequest.title,
      pullRequest.description,
      diff: pullRequestDiff,
    }
    assert outputResult.success, "Invalid output"

    // Return the pull request
    outputResult.data
  }
}