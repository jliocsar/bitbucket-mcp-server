{ $ } from bun
fs from node:fs
{ info, warn } from node:console
{ exit } from node:process

* as tar from tar

// Build configuration
targets :=
  . 'bun-linux-x64'
  . 'bun-linux-arm64'
  . 'bun-darwin-x64'
  . 'bun-darwin-arm64'
  . 'bun-windows-x64'
outputDir := './dist'

// Transpile all Civet source files to JS
await.all
  . $`civet --js -c src/*.civet -o ./dist/.js`
  . $`civet --js -c src/tools/*.civet -o ./dist/tools/.js`

// Create the output directory if it doesn't exist
unless fs.existsSync outputDir {
  fs.mkdirSync outputDir
}

// Build the binary for each target
await.all
  for target of targets
    // Remove the `bun-` prefix from the output filename
    suffix := target.replace 'bun-', ''
    outfile := `${outputDir}/bitbucket-mcp-server-${suffix}`

    // Build the binary
    try
      info `Building for ${target}...`
      await $`bun build \
        --compile \
        --minify \
        --target=${target} \
        ${outputDir}/index.js \
        --outfile ${outfile}`

      outputFileName := if outfile.includes 'windows' then `${outfile}.exe` else outfile
      tarFileName := `${outfile}.tar.gz`

      // Create a tarball of the binary
      info `Creating tarball...`
      await tar.create {
        +gzip
        file: tarFileName
      }, [outputFileName]

      // Remove the binary
      fs.unlinkSync outputFileName

      info `Built for ${target}`
    catch error
      warn `Error building for ${target}: ${error}`
      exit 1

// Reads the remaining files from the directory and removes only non `.tar.gz` ones
info 'Cleaning up...'
fs.readdirSync outputDir
  |> .filter (file) -> not file.endsWith '.tar.gz'
  |> for file of & {
    filePath := `${outputDir}/${file}`

    // Handle directories
    if filePath |> fs.statSync |> .isDirectory() {
      fs.rmdirSync filePath, { +recursive }
      continue
    }

    // Remove the file
    fs.unlinkSync filePath
  }
